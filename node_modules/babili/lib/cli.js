"use strict";

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var yargsParser = require("yargs-parser");
var optionsParser = require("./options-parser");

var _require = require("../package.json"),
    version = _require.version;

var _require2 = require("./fs"),
    processFiles = _require2.processFiles;

var plugins = ["booleans", "builtIns", "consecutiveAdds", "deadcode", "evaluate", "flipComparisons", "guards", "infinity", "mangle", "memberExpressions", "mergeVars", "numericLiterals", "propertyLiterals", "regexpConstructors", "removeConsole", "removeDebugger", "removeUndefined", "replace", "simplify", "simplifyComparisons", "typeConstructors", "undefinedToVoid"];

var proxies = ["keepFnName", "keepClassName"];

var dceBooleanOpts = ["deadcode.keepFnName", "deadcode.keepFnArgs", "deadcode.keepClassName"];

var mangleBooleanOpts = ["mangle.eval", "mangle.keepFnName", "mangle.topLevel", "mangle.keepClassName"];

var mangleArrayOpts = ["mangle.blacklist"];

var typeConsOpts = ["typeConstructors.array", "typeConstructors.boolean", "typeConstructors.number", "typeConstructors.object", "typeConstructors.string"];

var cliBooleanOpts = ["stdin", "help", "version"];
var cliOpts = ["out-file", "out-dir"];
var alias = {
  outFile: "o",
  outDir: "d",
  version: "V"
};

function aliasArr(obj) {
  var r = Object.keys(obj).reduce(function (acc, val) {
    return acc.concat(val, obj[val]);
  }, []);
  return r;
}

function printHelpInfo() {
  var msg = `
  Usage: babili index.js [options]

  Options:
    --out-file, -o          Output to a specific file
    --out-dir, -d           Output to a specific directory
    --mangle                Context and scope aware variable renaming
    --simplify              Simplifies code for minification by reducing statements into
                            expressions
    --booleans              Transform boolean literals into !0 for true and !1 for false
    --builtIns              Minify standard built-in objects
    --consecutiveAdds       Inlines consecutive property assignments, array pushes, etc.
    --deadcode              Inlines bindings and tries to evaluate expressions.
    --evaluate              Tries to evaluate expressions and inline the result. Deals
                            with numbers and strings
    --flipComparisons       Optimize code for repetition-based compression algorithms
                            such as gzip.
    --infinity              Minify Infinity to 1/0
    --memberExpressions     Convert valid member expression property literals into plain
                            identifiers
    --mergeVars             Merge sibling variables into single variable declaration
    --numericLiterals       Shortening of numeric literals via scientific notation
    --propertyLiterals      Transform valid identifier property key literals into identifiers
    --regexpConstructors    Change RegExp constructors into literals
    --removeConsole         Removes all console.* calls
    --removeDebugger        Removes all debugger statements
    --removeUndefined       Removes rval's for variable assignments, return arguments from
                            functions that evaluate to undefined
    --replace               Replaces matching nodes in the tree with a given replacement node
    --simplifyComparisons   Convert === and !== to == and != if their types are inferred
                            to be the same
    --typeConstructors      Minify constructors to equivalent version
    --undefinedToVoid       Transforms undefined into void 0
    --version, -V           Prints the current version number
  `;
  log(msg);
}

function log(msg) {
  process.stdout.write(msg);
  process.exit(0);
}

function validate(opts) {
  var allOpts = [].concat(plugins, proxies, dceBooleanOpts, mangleBooleanOpts, typeConsOpts, mangleArrayOpts, cliBooleanOpts, cliOpts, _toConsumableArray(aliasArr(alias)));

  return Object.keys(opts).filter(function (opt) {
    return opt !== "_" && allOpts.indexOf(opt) === -1;
  });
}

function run(args) {
  var presetOpts = [].concat(plugins, proxies);

  var booleanOpts = [].concat(_toConsumableArray(presetOpts), dceBooleanOpts, mangleBooleanOpts, typeConsOpts, cliBooleanOpts);

  var booleanDefaults = booleanOpts.reduce(function (acc, cur) {
    return Object.assign(acc, {
      [cur]: void 0
    });
  }, {});

  var arrayOpts = [].concat(mangleArrayOpts);

  var arrayDefaults = arrayOpts.reduce(function (acc, cur) {
    return Object.assign(acc, {
      [cur]: []
    });
  }, {});

  var argv = yargsParser(args, {
    boolean: booleanOpts,
    array: mangleArrayOpts,
    default: Object.assign({}, arrayDefaults, booleanDefaults),
    alias,
    configuration: {
      "dot-notation": false
    }
  });

  var files = argv["_"];
  argv["stdin"] = argv["stdin"] || !files.length;
  var errors = [];

  if (argv.help) {
    printHelpInfo();
    return;
  }

  if (argv.V) {
    log(version);
    return;
  }

  if (argv.outFile && argv.outDir) {
    errors.push("Cannot have out-file and out-dir");
  }

  var inputOpts = Object.keys(argv).filter(function (key) {
    if (Array.isArray(argv[key])) {
      return argv[key].length > 0;
    }
    return argv[key] !== void 0;
  }).reduce(function (acc, cur) {
    return Object.assign(acc, { [cur]: argv[cur] });
  }, {});

  var invalidOpts = validate(inputOpts);

  if (invalidOpts.length > 0) {
    errors.push("Invalid Options passed: " + invalidOpts.join(","));
  }

  if (errors.length > 0) {
    log(errors.join("\n"));
  }

  var options = optionsParser(inputOpts);

  // delete unncessary options to babili preset
  delete options["_"];
  delete options.d;
  delete options["out-dir"];
  delete options.o;
  delete options["out-file"];

  processFiles(files, options);
}

run(process.argv.slice(2));